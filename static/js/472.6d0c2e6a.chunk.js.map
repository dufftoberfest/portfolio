{"version":3,"file":"static/js/472.6d0c2e6a.chunk.js","mappings":"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","sources":["components/LazyImage.tsx","components/Test.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nconst LazyImage: React.FC<{ src: string; alt: string }> = ({ src, alt }) => {\n  const imgRef = useRef<HTMLImageElement>(null);\n\tuseEffect(()=>{\n\t\tconsole.log('LazyImage rerendering')\n\t},[])\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting && imgRef.current) {\n          imgRef.current.src = src;\n          observer.unobserve(imgRef.current);\n        }\n      });\n    });\n\n    if (imgRef.current) {\n      observer.observe(imgRef.current);\n    }\n\n    return () => {\n      if (imgRef.current) {\n        observer.unobserve(imgRef.current);\n      }\n    };\n  }, [src]);\n\n  return <img ref={imgRef} src=\"placeholder.jpg\" alt={alt} />;\n};\n\nexport default LazyImage;","import { useEffect, useRef, useState } from 'react';\nimport projectList from './projectList'\nimport LazyImage from './LazyImage';\nimport Modal from './Modal'\n\ninterface ProjectProps {\n    language: boolean;\n    setLanguage: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst Test: React.FC<ProjectProps> = (props) => {\n\tconsole.log('Test rerendering')\n\tconst imageUrls :string[] = []; // 로드할 이미지 URL 목록\n\tprojectList.forEach((el, i)=>{\n\t\timageUrls.push(`${process.env.PUBLIC_URL}/img/jpg/${el.rsc.name}_${el.responsive.main}.jpg`)\n\t})\n\n\tconst [isLoading, setIsLoading] = useState(true); // 모든 이미지가 로드되었는지 여부를 추적하는 상태 변수\n\tlet [modal, setModal] = useState(false);\n\tlet [target, setTarget] = useState(0);\n  \n\tuseEffect(() => {\n\t\tconst imageLoadStatus = Array(imageUrls.length).fill(true); // 각 이미지의 로딩 상태를 추적하는 배열 생성\n\t\tlet loadedImageCount = 0; // 로드된 이미지의 개수를 추적하는 변수\n\t\n\t\tconst checkAllImagesLoaded = () => {\n\t\t\t// 모든 이미지가 로드되었는지 확인\n\t\t\tif (loadedImageCount === imageUrls.length) {\n\t\t\t\tsetIsLoading(false);\n\t\t\t}\n\t\t};\n\t\n\t\tconst handleImageLoad = (index:number) => {\n\t\t\t// 이미지가 로드될 때 호출되는 콜백 함수\n\t\t\timageLoadStatus[index] = true; // 해당 이미지의 로딩 상태를 true로 변경\n\t\t\tloadedImageCount++; // 로드된 이미지 개수 증가\n\t\t\tcheckAllImagesLoaded(); // 모든 이미지가 로드되었는지 확인\n\t\t};\n\t\n\t\t// 각 이미지의 로드를 감지하기 위해 onload 이벤트 핸들러 추가\n\t\timageUrls.forEach((imageUrl, index) => {\n\t\t\tconst image = new Image();\n\t\t\timage.onload = () => handleImageLoad(index);\n\t\t\timage.src = imageUrl;\n\t\t});\n\t\n\t\t// 컴포넌트가 언마운트될 때 이벤트 리스너 제거\n\t\treturn () => {\n\t\t\t// 이미지 요소의 onload 이벤트 핸들러 제거\n\t\t\timageUrls.forEach((imageUrl, index) => {\n\t\t\tconst image = new Image();\n\t\t\timage.onload = null;\n\t\t\t});\n\t\t};\n\t}, [imageUrls]); // imageUrls 배열이 변경될 때마다 useEffect 재실행\n\treturn(\n\t\t<div className=\"container\">\n\t\t\t{ isLoading && <aside className=\"msg-cover loading\"><img src={`${process.env.PUBLIC_URL}/img/icon-loading.gif`} alt=\"\" /></aside> }\n\t\t\t{\n\t\t\t\tmodal\n\t\t\t\t?<Modal modal={modal} setModal={setModal} target={target} setTarget={setTarget} language={props.language} setLanguage={props.setLanguage}/>\n\t\t\t\t:null\n\t\t\t}\n\t\t\t<h1>Project</h1>\n\t\t\t<section>\n\t\t\t\t<ul className=\"pj\">\n\t\t\t\t\t{\n\t\t\t\t\t\tprojectList.map((el, i)=>{\n\t\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t\t<li key={i}>\n\t\t\t\t\t\t\t\t\t<a href=\"#\" onClick={(e)=>{\n\t\t\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\t\t\tsetModal(!modal)\n\t\t\t\t\t\t\t\t\t\tsetTarget(i)\n\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t<LazyImage src={`${process.env.PUBLIC_URL}/img/jpg/${el.rsc.name}_${el.responsive.main}.jpg`} alt=\"\" />\n\t\t\t\t\t\t\t\t\t\t<div className=\"cover\"></div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"desc\">\n\t\t\t\t\t\t\t\t\t\t\t<p className=\"pro-tit\">\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tprops.language\n\t\t\t\t\t\t\t\t\t\t\t\t\t? el.projectName.eng\n\t\t\t\t\t\t\t\t\t\t\t\t\t: el.projectName.kor\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"tags\">\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tel.skills.map((element, j)=>{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"tag\" key={j}>{element}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t</ul>\n\t\t\t</section>\n\t\t</div>\n\t)\n}\n\nexport default Test;"],"names":["_ref","src","alt","imgRef","useRef","useEffect","console","log","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","current","unobserve","observe","_jsx","ref","props","imageUrls","projectList","el","i","push","concat","process","rsc","name","responsive","main","isLoading","setIsLoading","useState","modal","setModal","target","setTarget","imageLoadStatus","Array","length","fill","loadedImageCount","handleImageLoad","index","imageUrl","image","Image","onload","_jsxs","className","children","Modal","language","setLanguage","map","href","onClick","e","preventDefault","LazyImage","projectName","eng","kor","skills","element","j"],"sourceRoot":""}